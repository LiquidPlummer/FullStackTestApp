{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RemoteService {\n  constructor(http) {\n    this.baseURL = 'http://localhost:7777';\n    this.http = http;\n  }\n  post(testModel) {\n    let options = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.baseURL + '/post', JSON.stringify(testModel), options).pipe(retry(1), catchError(this.errorHandler));\n  }\n  get() {\n    return this.http.get(this.baseURL + '/get').pipe;\n  }\n  // Error handling\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nRemoteService.ɵfac = function RemoteService_Factory(t) {\n  return new (t || RemoteService)(i0.ɵɵinject(i1.HttpClient));\n};\nRemoteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RemoteService,\n  factory: RemoteService.ɵfac,\n  providedIn: 'root'\n});\nexport class TestModel {\n  constructor(message, id) {\n    this.message = message;\n    this.id = id;\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;AAClD,SAAqBC,UAAU,QAAQ,MAAM;;;AAK7C,OAAM,MAAOC,aAAa;EAIxBC,YAAYC,IAAgB;IAF5B,YAAO,GAAW,uBAAuB;IAGvC,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEAC,IAAI,CAACC,SAAoB;IACvB,IAAIC,OAAO,GAAG;MACZC,OAAO,EAAE,IAAIV,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAED,OAAO,IAAI,CAACM,IAAI,CAACC,IAAI,CAAY,IAAI,CAACI,OAAO,GAAG,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS,CAAC,EAAEC,OAAO,CAAC,CACzFK,IAAI,CACHZ,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACc,YAAY,CAAC,CAC9B;EACL;EAEAC,GAAG;IACD,OAAO,IAAI,CAACV,IAAI,CAACU,GAAG,CAAc,IAAI,CAACL,OAAO,GAAG,MAAM,CAAC,CACvDG,IAAI;EACP;EAGE;EACAC,YAAY,CAACE,KAAU;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOf,UAAU,CAACe,YAAY,CAAC;EACjC;;AAxCSd,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAoB,SAAbpB,aAAa;EAAAqB,YAFZ;AAAM;AA6CpB,OAAM,MAAOC,SAAS;EAGpBrB,YAAYe,OAAe,EAAEO,EAAW;IACtC,IAAI,CAACP,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACO,EAAE,GAAGA,EAAE;EACd","names":["HttpHeaders","catchError","retry","throwError","RemoteService","constructor","http","post","testModel","options","headers","baseURL","JSON","stringify","pipe","errorHandler","get","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn","TestModel","id"],"sourceRoot":"","sources":["C:\\Training\\FullStackTestApp\\client\\FullStackTestClient\\src\\app\\remote.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, retry } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RemoteService {\n  http: HttpClient;\n  baseURL: string = 'http://localhost:7777'\n\n  constructor(http: HttpClient) {\n    this.http = http;\n  }\n\n  post(testModel: TestModel): Observable<TestModel> {\n    let options = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    }\n\n    return this.http.post<TestModel>(this.baseURL + '/post', JSON.stringify(testModel), options)\n      .pipe(\n        retry(1),\n        catchError(this.errorHandler)\n      );\n  }\n\n  get(): Observable<TestModel>[] {\n    return this.http.get<TestModel[]>(this.baseURL + '/get')\n    .pipe\n  }\n\n\n    // Error handling\n    errorHandler(error: any) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        // Get client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Get server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n}\n\nexport class TestModel {\n  id?: number;\n  message: String;\n  constructor(message: String, id?: number) {\n    this.message = message;\n    this.id = id;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}